package org.hzero.srm.pr.infra.utils;

import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 本工具类用于比较两个对象的属性值
 *
 * @author maoting.tang@hand-china.com 2019/2/26 16:33
 */
public class ClassCompareUtil {
    /**
     * 比较两个实体属性值，返回一个map以有差异的属性名为key，value为一个Map分别存oldObject,newObject此属性名的值
     * @param oldObject 属性比较对象1
     * @param newObject 属性比较对象2
     * @return 属性差异比较结果map
     */
    @SuppressWarnings("rawtypes")
    public static Map<String, Map<String,Object>> compareFields(Object oldObject, Object newObject) {
        Map<String, Map<String, Object>> map = null;
        try{
            /**
             * 只有两个对象都是同一类型的才有可比性
             */
            if (oldObject.getClass() == newObject.getClass()) {
                map = new HashMap<>();
                Class clazz = oldObject.getClass();
                //获取object的所有属性
                PropertyDescriptor[] pds = Introspector.getBeanInfo(clazz,Object.class).getPropertyDescriptors();
                for (PropertyDescriptor pd : pds) {
                    //遍历获取属性名
                    String name = pd.getName();
                    //获取属性的get方法
                    Method readMethod = pd.getReadMethod();
                    //获取oldObject的属性值
                    Object oldValue = readMethod.invoke(oldObject);
                    // 获取newObject的属性值
                    Object newValue = readMethod.invoke(newObject);

                    //集合类型
                    if(oldValue instanceof List){
                        continue;
                    }

                    if(newValue instanceof List){
                        continue;
                    }

                    //时间类型
                    if(oldValue instanceof Timestamp){
                        oldValue = new Date(((Timestamp) oldValue).getTime());
                    }

                    if(newValue instanceof Timestamp){
                        newValue = new Date(((Timestamp) newValue).getTime());
                    }

                    if(oldValue == null && newValue == null){
                        continue;
                    }else if(oldValue == null && newValue != null){
                        Map<String,Object> valueMap = new HashMap<>();
                        valueMap.put("oldValue",oldValue);
                        valueMap.put("newValue",newValue);
                        map.put(name, valueMap);
                        continue;
                    }
                    // 比较这两个值是否相等,不等则放入map集合
                    Map<String,Object> valueMap = new HashMap<>();
                    //数字类型特殊比较
                    if (oldValue instanceof BigDecimal || newValue instanceof BigDecimal) {
                        BigDecimal oldVal = (BigDecimal) oldValue;
                        BigDecimal newVal = (BigDecimal) newValue;
                        if (oldVal.compareTo(newVal) != 0) {
                            valueMap.put("oldValue",oldValue);
                            valueMap.put("newValue",newValue);
                            map.put(name, valueMap);
                        }
                    }else {
                        if (!oldValue.equals(newValue)) {
                            valueMap.put("oldValue", oldValue);
                            valueMap.put("newValue", newValue);
                            map.put(name, valueMap);
                        }
                    }
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        return map;
    }
}
